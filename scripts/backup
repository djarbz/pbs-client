#!/usr/bin/env bash
# shellcheck shell=bash

source "/tmp/pbs-client.env"

# Build the backup command we want to execute.
BACKUP_CMD="proxmox-backup-client backup"

if [ -n "${PBC_OPT_NAMESPACE}" ]; then
  BACKUP_CMD+=" --ns ${PBC_OPT_NAMESPACE}"
fi

if [ -n "${PBC_OPT_SKIP_LOST_AND_FOUND}" ]; then
  BACKUP_CMD+=" --skip-lost-and-found True"
fi

if [ -n "${PBC_OPT_CHANGE_DETECTION_MODE}" ]; then
  BACKUP_CMD+=" --change-detection-mode ${PBC_OPT_CHANGE_DETECTION_MODE}"
fi

if [ -n "${PBC_OPT_ARGS}" ]; then
  BACKUP_CMD+=" ${PBC_OPT_ARGS}"
fi

BACKUP_DIRECTORIES=()
# Iterate over each subdirectory under /backup and add its full path to the array
for dir in "${PBC_BACKUP_ROOT}"/*; do
  [[ -d "$dir" ]] && BACKUP_DIRECTORIES+=("$dir")
done

# Feature flag to find mount points
if [[ "${PBC_BACKUP_FINDMNT}" == "true" ]]; then
  # Find all mount points under PBC_BACKUP_ROOT
  # Using mapfile -t to safely read multi-line output into an array
  # Using process substitution to avoid subshell issues
  mapfile -t -O "${#BACKUP_DIRECTORIES[@]}" BACKUP_DIRECTORIES < <(findmnt -n -o TARGET -l | grep -e "^${PBC_BACKUP_ROOT}/")
fi

# Sort and de-duplicate the list of BACKUP_DIRECTORIES
# Using process substitution to avoid subshell issues with mapfile
mapfile -t BACKUP_DIRECTORIES < <(printf "%s\n" "${BACKUP_DIRECTORIES[@]}" | sort -u)

# Construct the directory target list with the proxmox-backup-client syntax.
# This makes 1 .pxar file per path.
for target in "${BACKUP_DIRECTORIES[@]}"; do
  # Ensure that bind mounted files are note included.
  if [[ ! -d "${target}" ]]; then
    echo "WARNING: Target is NOT a directory, skipping [${target}]"
    continue
  fi

  # Start with a clean slate for PXAR_NAME
  PXAR_NAME=""

  # 1. Remove the PBC_BACKUP_ROOT prefix
  # Use parameter expansion for prefix removal. Ensure it handles cases where
  # PBC_BACKUP_ROOT might be just "/" or "///".
  PXAR_NAME="${target#"$PBC_BACKUP_ROOT"}"

  # 2. Remove any leading slashes (e.g., if PXAR_NAME was just "/some/dir")
  # This handles the case where PBC_BACKUP_ROOT is "/" and dir is "/backup/data/",
  # resulting in "/backup/data/" initially for PXAR_NAME.
  # It also handles if dir was the same as PBC_BACKUP_ROOT (e.g., /backup),
  # resulting in an empty string or just "/" which we clean up.
  PXAR_NAME="${PXAR_NAME#\/}"
  PXAR_NAME="${PXAR_NAME#\/}" # Repeat for robustness against multiple leading slashes (e.g., //backup)

  # 3. Remove any trailing slashes (e.g., "/path/to/dir/")
  PXAR_NAME="${PXAR_NAME%/}"

  # 4. Replace all slashes with double Underscores
  PXAR_NAME="${PXAR_NAME//\//__}"

  # 5. Replace any sequences of non-alphanumeric, non-hyphen, non-underscore
  #    characters with a single hyphen. This is the most robust step.
  #    Use POSIX character classes for portability and clarity.
  #    First, convert valid special characters to a unique placeholder to protect them
  #    during the main sanitization, then restore them.
  #    This part can get tricky if you want to allow only hyphens and underscores,
  #    and convert all *other* non-alphanumeric characters.

  # Option A: Simple replacement of anything not allowed with a hyphen,
  # then collapsing multiple hyphens.
  # This is usually sufficient and simpler.
  # Replace characters NOT [a-zA-Z0-9_-] with a hyphen
  PXAR_NAME=$(echo "$PXAR_NAME" | sed -E 's/[^a-zA-Z0-9_-]+/-/g')

  # 6. Remove leading/trailing hyphens that might have resulted from sanitization
  PXAR_NAME="${PXAR_NAME#-}"
  PXAR_NAME="${PXAR_NAME%-}"

  # 7. Handle the edge case where PXAR_NAME becomes empty after sanitization
  # (e.g., if PBC_BACKUP_ROOT was "/" and dir was also "/")
  if [[ -z "$PXAR_NAME" ]]; then
    # If the name is empty, it means the source path was effectively the root.
    # You might want a default name, or handle this specifically.
    # For now, let's use a generic name or "root-backup".
    PXAR_NAME="root-backup"
  fi

  BACKUP_CMD+=" ${PXAR_NAME}.pxar:${target}/"
done

# Print out the repository and backup command on first run only.
# if [ ! -e "${PBC_LAST_RUN_FILE}" ]; then
echo "## Detected backup directories:"
echo -e "#"
if [ ${#BACKUP_DIRECTORIES[@]} -eq 0 ]; then
  echo "# Nothing to backup."
  exit 1
else
  for path in "${BACKUP_DIRECTORIES[@]}"; do
    echo -e "# $path"
  done
  echo -e "#\n"
fi
echo "## Backing up to repository: ${PBS_REPOSITORY}"
echo "## Executing backup command: ${BACKUP_CMD}"
# fi

# Run the actual backup command.
${BACKUP_CMD}

# First run touches the file. Backups will set the date.
date +"%Y-%m-%d %H:%M:%S" > "${PBC_LAST_RUN_FILE}"
